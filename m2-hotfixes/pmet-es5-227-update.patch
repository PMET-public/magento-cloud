diff --git a/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Adapter/FieldMapper/ProductFieldMapper.php b/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Adapter/FieldMapper/ProductFieldMapper.php
index dc8d73a..e094730 100644
--- a/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Adapter/FieldMapper/ProductFieldMapper.php
+++ b/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Adapter/FieldMapper/ProductFieldMapper.php
@@ -131,7 +131,7 @@ class ProductFieldMapper implements FieldMapperInterface
                 if ($attribute->getIsFilterable() || $attribute->getIsFilterableInSearch()) {
                     $allAttributes[$attributeCode]['type'] = FieldType::ES_DATA_TYPE_KEYWORD;
                 } else if ($allAttributes[$attributeCode]['type'] === FieldType::ES_DATA_TYPE_TEXT) {
-                    $allAttributes[$attributeCode]['index'] = 'no';
+                    $allAttributes[$attributeCode]['index'] = false;
                 }
             } else if ($attributeCode == "category_ids") {
                 $allAttributes[$attributeCode] = [
@@ -175,6 +175,7 @@ class ProductFieldMapper implements FieldMapperInterface
     {
         switch ($frontendInput) {
             case 'select':
+            case 'multiselect':
                 return in_array($fieldType, ['text','integer'], true) ? $attributeCode . '_value' : $attributeCode;
             case 'boolean':
                 return $fieldType === 'integer' ? $attributeCode . '_value' : $attributeCode;
diff --git a/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php b/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php
index be17f81..24f5842 100644
--- a/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php
+++ b/vendor/magento/module-elasticsearch/Elasticsearch5/Model/Client/Elasticsearch.php
@@ -47,7 +47,7 @@ class Elasticsearch implements ClientInterface
         $elasticsearchClient = null
     ) {
         if (empty($options['hostname']) || ((!empty($options['enableAuth']) &&
-                    ($options['enableAuth'] == 1)) && (empty($options['username']) || empty($options['password'])))) {
+            ($options['enableAuth'] == 1)) && (empty($options['username']) || empty($options['password'])))) {
             throw new LocalizedException(
                 __('We were unable to perform the search because of a search engine misconfiguration.')
             );
@@ -268,7 +268,7 @@ class Elasticsearch implements ClientInterface
                                 'match_mapping_type' => 'string',
                                 'mapping' => $this->prepareFieldInfo([
                                     'type' => 'text',
-                                    'index' => 'no',
+                                    'index' => false,
                                 ]),
                             ],
                         ],
diff --git a/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php b/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php
index 0e9ccdd..a1fcbeb 100644
--- a/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php
+++ b/vendor/magento/module-elasticsearch/Elasticsearch5/SearchAdapter/Aggregation/Interval.php
@@ -3,6 +3,8 @@
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
+declare(strict_types=1);
+
 namespace Magento\Elasticsearch\Elasticsearch5\SearchAdapter\Aggregation;
 
 use Magento\Framework\Search\Dynamic\IntervalInterface;
@@ -12,6 +14,9 @@ use Magento\Elasticsearch\Model\Config;
 use Magento\Elasticsearch\SearchAdapter\SearchIndexNameResolver;
 use Magento\CatalogSearch\Model\Indexer\Fulltext;
 
+/**
+ * Aggregate price intervals for search query result.
+ */
 class Interval implements IntervalInterface
 {
     /**
@@ -22,17 +27,17 @@ class Interval implements IntervalInterface
     /**
      * @var ConnectionManager
      */
-    protected $connectionManager;
+    private $connectionManager;
 
     /**
      * @var FieldMapperInterface
      */
-    protected $fieldMapper;
+    private $fieldMapper;
 
     /**
      * @var Config
      */
-    protected $clientConfig;
+    private $clientConfig;
 
     /**
      * @var string
@@ -68,9 +73,9 @@ class Interval implements IntervalInterface
         FieldMapperInterface $fieldMapper,
         Config $clientConfig,
         SearchIndexNameResolver $searchIndexNameResolver,
-        $fieldName,
-        $storeId,
-        $entityIds
+        string $fieldName,
+        string $storeId,
+        array $entityIds
     ) {
         $this->connectionManager = $connectionManager;
         $this->fieldMapper = $fieldMapper;
@@ -94,46 +99,16 @@ class Interval implements IntervalInterface
             $to = ['lt' => $upper - self::DELTA];
         }
 
-        $requestQuery = [
-            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
-            'type' => $this->clientConfig->getEntityType(),
-            'body' => [
-                '_source' => [
-                    '_id',
-                    $this->fieldName,
-                ],
-                'query' => [
-                    'bool' => [
-                        'must' => [
-                            'match_all' => (object)[],
-                        ],
-                        'filter' => [
-                            'bool' => [
-                                'must' => [
-                                    [
-                                        'terms' => [
-                                            '_id' => $this->entityIds,
-                                        ],
-                                    ],
-                                    [
-                                        'range' => [
-                                            $this->fieldName => array_merge($from, $to),
-                                        ],
-                                    ],
-                                ],
-                            ],
-                        ],
-                    ],
-                ],
-                'sort' => [
-                    $this->fieldName,
-                ],
-                'size' => $limit,
-            ],
-        ];
+        $requestQuery = $this->prepareBaseRequestQuery($from, $to);
+        $requestQuery = array_merge_recursive(
+            $requestQuery,
+            ['body' => ['stored_fields' => [$this->fieldName], 'size' => $limit]]
+        );
+
         if ($offset) {
             $requestQuery['body']['from'] = $offset;
         }
+
         $queryResult = $this->connectionManager->getConnection()
             ->query($requestQuery);
 
@@ -152,42 +127,12 @@ class Interval implements IntervalInterface
             $to = ['lt' => $data - self::DELTA];
         }
 
-        $requestQuery = [
-            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
-            'type' => $this->clientConfig->getEntityType(),
-            'search_type' => 'count',
-            'body' => [
-                '_source' => [
-                    '_id'
-                ],
-                'query' => [
-                    'bool' => [
-                        'must' => [
-                            'match_all' => (object)[],
-                        ],
-                        'filter' => [
-                            'bool' => [
-                                'must' => [
-                                    [
-                                        'terms' => [
-                                            '_id' => $this->entityIds,
-                                        ],
-                                    ],
-                                    [
-                                        'range' => [
-                                            $this->fieldName => array_merge($from, $to),
-                                        ],
-                                    ],
-                                ],
-                            ],
-                        ],
-                    ],
-                ],
-                'sort' => [
-                    $this->fieldName,
-                ],
-            ],
-        ];
+        $requestQuery = $this->prepareBaseRequestQuery($from, $to);
+        $requestQuery = array_merge_recursive(
+            $requestQuery,
+            ['size' => 0]
+        );
+
         $queryResult = $this->connectionManager->getConnection()
             ->query($requestQuery);
 
@@ -207,42 +152,12 @@ class Interval implements IntervalInterface
         $from = ['gt' => $data + self::DELTA];
         $to = ['lt' => $data - self::DELTA];
 
-        $requestCountQuery = [
-            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
-            'type' => $this->clientConfig->getEntityType(),
-            'search_type' => 'count',
-            'body' => [
-                '_source' => [
-                    '_id'
-                ],
-                'query' => [
-                    'bool' => [
-                        'must' => [
-                            'match_all' => (object)[],
-                        ],
-                        'filter' => [
-                            'bool' => [
-                                'must' => [
-                                    [
-                                        'terms' => [
-                                            '_id' => $this->entityIds,
-                                        ],
-                                    ],
-                                    [
-                                        'range' => [
-                                            $this->fieldName => array_merge($from, $to),
-                                        ],
-                                    ],
-                                ],
-                            ],
-                        ],
-                    ],
-                ],
-                'sort' => [
-                    $this->fieldName,
-                ],
-            ],
-        ];
+        $requestCountQuery = $this->prepareBaseRequestQuery($from, $to);
+        $requestCountQuery = array_merge_recursive(
+            $requestCountQuery,
+            ['size' => 0]
+        );
+
         $queryCountResult = $this->connectionManager->getConnection()
             ->query($requestCountQuery);
 
@@ -257,12 +172,11 @@ class Interval implements IntervalInterface
         }
 
         $requestQuery = $requestCountQuery;
-        $requestCountQuery['body']['query']['filtered']['filter']['bool']['must']['range'] =
-            [$this->fieldName => array_merge($from, $to)];
 
+        $requestCountQuery['body']['query']['bool']['filter']['bool']['must']['range'] =
+            [$this->fieldName => array_merge($from, $to)];
         $requestCountQuery['body']['from'] = $offset - 1;
         $requestCountQuery['body']['size'] = $rightIndex - $offset + 1;
-
         $queryResult = $this->connectionManager->getConnection()
             ->query($requestQuery);
 
@@ -270,18 +184,68 @@ class Interval implements IntervalInterface
     }
 
     /**
+     * Conver array values to float type.
+     *
      * @param array $hits
      * @param string $fieldName
      *
      * @return float[]
      */
-    private function arrayValuesToFloat($hits, $fieldName)
+    private function arrayValuesToFloat(array $hits, string $fieldName): array
     {
         $returnPrices = [];
         foreach ($hits as $hit) {
-            $returnPrices[] = (float) $hit['_source'][$fieldName][0];
+            $returnPrices[] = (float)$hit['fields'][$fieldName][0];
         }
 
         return $returnPrices;
     }
+
+    /**
+     * Prepare base query for search.
+     *
+     * @param array|null $from
+     * @param array|null $to
+     * @return array
+     */
+    private function prepareBaseRequestQuery($from = null, $to = null): array
+    {
+        $requestQuery = [
+            'index' => $this->searchIndexNameResolver->getIndexName($this->storeId, Fulltext::INDEXER_ID),
+            'type' => $this->clientConfig->getEntityType(),
+            'body' => [
+                'stored_fields' => [
+                    '_id',
+                ],
+                'query' => [
+                    'bool' => [
+                        'must' => [
+                            'match_all' => new \stdClass(),
+                        ],
+                        'filter' => [
+                            'bool' => [
+                                'must' => [
+                                    [
+                                        'terms' => [
+                                            '_id' => $this->entityIds,
+                                        ],
+                                    ],
+                                    [
+                                        'range' => [
+                                            $this->fieldName => array_merge($from, $to),
+                                        ],
+                                    ],
+                                ],
+                            ],
+                        ],
+                    ],
+                ],
+                'sort' => [
+                    $this->fieldName,
+                ],
+            ],
+        ];
+
+        return $requestQuery;
+    }
 }
diff --git a/vendor/magento/module-elasticsearch/Model/Adapter/BatchDataMapper/ProductDataMapper.php b/vendor/magento/module-elasticsearch/Model/Adapter/BatchDataMapper/ProductDataMapper.php
index 0470f8d..d7e7b86 100644
--- a/vendor/magento/module-elasticsearch/Model/Adapter/BatchDataMapper/ProductDataMapper.php
+++ b/vendor/magento/module-elasticsearch/Model/Adapter/BatchDataMapper/ProductDataMapper.php
@@ -6,7 +6,6 @@
 namespace Magento\Elasticsearch\Model\Adapter\BatchDataMapper;
 
 use Magento\CatalogSearch\Model\Indexer\Fulltext\Action\DataProvider;
-use Magento\Eav\Api\Data\AttributeInterface;
 use Magento\Elasticsearch\Model\Adapter\Document\Builder;
 use Magento\Elasticsearch\Model\Adapter\FieldMapperInterface;
 use Magento\Elasticsearch\Model\Adapter\BatchDataMapperInterface;
@@ -33,11 +32,6 @@ class ProductDataMapper implements BatchDataMapperInterface
      */
     private $dateFieldType;
 
-    /**
-     * @var array
-     */
-    private $attributeData = [];
-
     /**
      * @var array
      */
@@ -107,8 +101,6 @@ class ProductDataMapper implements BatchDataMapperInterface
      */
     public function map(array $documentData, $storeId, array $context = [])
     {
-        // reset attribute data for new store
-        $this->attributeData = [];
         $documents = [];
 
         foreach ($documentData as $productId => $indexData) {
@@ -120,9 +112,7 @@ class ProductDataMapper implements BatchDataMapperInterface
                     $this->builder->addField($attributeCode, $value);
                     continue;
                 }
-                if (in_array($attributeCode, $this->excludedAttributes, true)) {
-                    continue;
-                }
+
                 $this->builder->addField(
                     $this->fieldMapper->getFieldName(
                         $attributeCode,
@@ -154,25 +144,31 @@ class ProductDataMapper implements BatchDataMapperInterface
      * @param int $storeId
      * @return array
      */
-    private function convertToProductData($productId, array $indexData, $storeId)
+    private function convertToProductData(int $productId, array $indexData, int $storeId): array
     {
         $productAttributes = [];
-        foreach ($indexData as $attributeId => $attributeValue) {
-            $attributeData = $this->getAttributeData($attributeId);
-            if (!$attributeData) {
+
+        if (isset($indexData['options'])) {
+            // cover case with "options"
+            // see \Magento\CatalogSearch\Model\Indexer\Fulltext\Action\DataProvider::prepareProductIndex
+            $productAttributes['options'] = $indexData['options'];
+            unset($indexData['options']);
+        }
+
+        foreach ($indexData as $attributeId => $attributeValues) {
+            /** @var \Magento\Catalog\Model\ResourceModel\Eav\Attribute $attribute */
+            $attribute = $this->dataProvider->getSearchableAttribute($attributeId);
+            if (in_array($attribute->getAttributeCode(), $this->excludedAttributes, true)) {
                 continue;
             }
-            $productAttributes = array_merge(
-                $productAttributes,
-                $this->convertAttribute(
-                    $productId,
-                    $attributeId,
-                    $attributeValue,
-                    $attributeData,
-                    $storeId
-                )
-            );
+
+            if (!\is_array($attributeValues)) {
+                $attributeValues = [$productId => $attributeValues];
+            }
+            $attributeValues = $this->prepareAttributeValues($productId, $attribute, $attributeValues, $storeId);
+            $productAttributes += $this->convertAttribute($attribute, $attributeValues);
         }
+
         return $productAttributes;
     }
 
@@ -180,196 +176,108 @@ class ProductDataMapper implements BatchDataMapperInterface
      * Convert data for attribute: 1) add new value {attribute_code}_value for select and multiselect searchable
      * attributes, that will contain actual value 2) add child products data to composite products
      *
-     * @param int $productId
-     * @param int $attributeId
-     * @param mixed $attributeValue
-     * @param array $attributeData
-     * @param int $storeId
+     * @param \Magento\Catalog\Model\ResourceModel\Eav\Attribute $attribute
+     * @param array $attributeValues
      * @return array
      */
-    private function convertAttribute($productId, $attributeId, $attributeValue, array $attributeData, $storeId)
+    private function convertAttribute($attribute, array $attributeValues): array
     {
         $productAttributes = [];
-        $attributeCode = $attributeData[AttributeInterface::ATTRIBUTE_CODE];
-        $attributeFrontendInput = $attributeData[AttributeInterface::FRONTEND_INPUT];
-        $attributeBackendType = $attributeData[AttributeInterface::BACKEND_TYPE];
-        if (is_array($attributeValue)) {
-            if (!$attributeData['is_searchable']) {
-                $value = $this->getValueForAttribute(
-                    $productId,
-                    $attributeCode,
-                    $attributeValue,
-                    $attributeData['is_searchable'],
-                    $attributeBackendType
-                );
-            } else {
-                if (($attributeFrontendInput == 'select' || $attributeFrontendInput == 'multiselect')
-                    && !in_array($attributeCode, $this->excludedAttributes)
-                ) {
-                    $value = $this->getValueForAttribute(
-                        $productId,
-                        $attributeCode,
-                        $attributeValue,
-                        $attributeData['is_searchable'],
-                        $attributeBackendType
-                    );
-                    $productAttributes[$attributeCode . '_value'] = $this->getValueForAttributeOptions(
-                        $attributeData,
-                        $attributeValue
-                    );
-                } else {
-                    $value = $this->prepareArrayAttributeValue($attributeValue, $attributeBackendType);
-                }
-            }
-        } else {
-            $value = $attributeValue;
-        }
 
-        // cover case with "options"
-        // see \Magento\CatalogSearch\Model\Indexer\Fulltext\Action\DataProvider::prepareProductIndex
-        if ($value) {
-            if ($attributeId === 'options') {
-                $productAttributes[$attributeId] = $value;
-            } else {
-                if (isset($attributeData[AttributeInterface::OPTIONS][$value])) {
-                    $productAttributes[$attributeCode . '_value'] = $attributeData[AttributeInterface::OPTIONS][$value];
+        $retrievedValue = $this->retrieveFieldValue($attributeValues);
+        if ($retrievedValue) {
+            $productAttributes[$attribute->getAttributeCode()] = $retrievedValue;
+
+            if ($attribute->getIsSearchable()) {
+                $attributeLabels = $this->getValuesLabels($attribute, $attributeValues);
+                $retrievedLabel = $this->retrieveFieldValue($attributeLabels);
+                if ($retrievedLabel) {
+                    $productAttributes[$attribute->getAttributeCode() . '_value'] = $retrievedLabel;
                 }
-                $productAttributes[$attributeCode] = $this->formatProductAttributeValue(
-                    $value,
-                    $attributeData,
-                    $storeId
-                );
             }
         }
+
         return $productAttributes;
     }
 
     /**
-     * Get product attribute data by attribute id
-     *
-     * @param int $attributeId
+     * @param int $productId
+     * @param \Magento\Catalog\Model\ResourceModel\Eav\Attribute $attribute
+     * @param array $attributeValues
+     * @param int $storeId
      * @return array
      */
-    private function getAttributeData($attributeId)
+    private function prepareAttributeValues(int $productId, $attribute, array $attributeValues, int $storeId): array
     {
-        if (!array_key_exists($attributeId, $this->attributeData)) {
-            $attribute = $this->dataProvider->getSearchableAttribute($attributeId);
-            if ($attribute) {
-                $options = [];
-                if ($attribute->getFrontendInput() === 'select' || $attribute->getFrontendInput() === 'multiselect') {
-                    foreach ($attribute->getOptions() as $option) {
-                        $options[$option->getValue()] = $option->getLabel();
-                    }
-                }
-                $this->attributeData[$attributeId] = [
-                    AttributeInterface::ATTRIBUTE_CODE => $attribute->getAttributeCode(),
-                    AttributeInterface::FRONTEND_INPUT => $attribute->getFrontendInput(),
-                    AttributeInterface::BACKEND_TYPE => $attribute->getBackendType(),
-                    AttributeInterface::OPTIONS => $options,
-                    'is_searchable' => $attribute->getIsSearchable(),
-                ];
-            } else {
-                $this->attributeData[$attributeId] = null;
+        if (in_array($attribute->getAttributeCode(), $this->attributesExcludedFromMerge, true)) {
+            $attributeValues = [
+                $productId => $attributeValues[$productId] ?? '',
+            ];
+        }
+
+        if ($attribute->getFrontendInput() === 'multiselect') {
+            $attributeValues = $this->prepareMultiselectValues($attributeValues);
+        }
+
+        if ($this->isAttributeDate($attribute)) {
+            foreach ($attributeValues as $key => $attributeValue) {
+                $attributeValues[$key] = $this->dateFieldType->formatDate($storeId, $attributeValue);
             }
         }
 
-        return $this->attributeData[$attributeId];
+        return $attributeValues;
     }
 
     /**
-     * Format product attribute value for search engine
-     *
-     * @param mixed $value
-     * @param array $attributeData
-     * @param string $storeId
-     * @return string
+     * @param array $values
+     * @return array
      */
-    private function formatProductAttributeValue($value, $attributeData, $storeId)
+    private function prepareMultiselectValues(array $values): array
     {
-        if ($attributeData[AttributeInterface::FRONTEND_INPUT] === 'date'
-            || in_array($attributeData[AttributeInterface::BACKEND_TYPE], ['datetime', 'timestamp'])) {
-            return $this->dateFieldType->formatDate($storeId, $value);
-        } elseif ($attributeData[AttributeInterface::FRONTEND_INPUT] === 'multiselect') {
-            return str_replace(',', ' ', $value);
-        } else {
-            return $value;
-        }
+        return \array_merge(...\array_map(function (string $value) {
+            return \explode(',', $value);
+        }, $values));
     }
 
     /**
-     * Return single value if value exists for the productId in array, otherwise return concatenated array values
-     *
-     * @param int $productId
-     * @param string $attributeCode
-     * @param array $attributeValue
-     * @param bool $isSearchable
-     * @param string|null $attributeBackendType
-     * @return mixed
+     * @param \Magento\Catalog\Model\ResourceModel\Eav\Attribute $attribute
+     * @return bool
      */
-    private function getValueForAttribute(
-        $productId,
-        $attributeCode,
-        array $attributeValue,
-        $isSearchable,
-        $attributeBackendType
-    ) {
-        if ((!$isSearchable || in_array($attributeCode, $this->attributesExcludedFromMerge))
-            && isset($attributeValue[$productId])
-        ) {
-            $value = $attributeValue[$productId];
-        } elseif (in_array($attributeCode, $this->attributesExcludedFromMerge) && !isset($attributeValue[$productId])) {
-            $value = '';
-        } else {
-            $value = $this->prepareArrayAttributeValue($attributeValue, $attributeBackendType);
-        }
-        return $value;
+    private function isAttributeDate($attribute): bool
+    {
+        return $attribute->getFrontendInput() === 'date'
+            || in_array($attribute->getBackendType(), ['datetime', 'timestamp'], true);
     }
 
     /**
-     * Concatenate select and multiselect attribute values
-     *
-     * @param array $attributeData
-     * @param array $attributeValue
-     * @return string
+     * @param \Magento\Catalog\Model\ResourceModel\Eav\Attribute $attribute
+     * @param array $attributeValues
+     * @return array
      */
-    private function getValueForAttributeOptions(array $attributeData, array $attributeValue)
+    private function getValuesLabels($attribute, array $attributeValues): array
     {
-        $result = null;
-        $selectedValues = [];
-        if ($attributeData[AttributeInterface::FRONTEND_INPUT] == 'select') {
-            foreach ($attributeValue as $selectedValue) {
-                if (isset($attributeData[AttributeInterface::OPTIONS][$selectedValue])) {
-                    $selectedValues[] = $attributeData[AttributeInterface::OPTIONS][$selectedValue];
-                }
+        $attributeLabels = [];
+        foreach ($attribute->getOptions() as $option) {
+            if (\in_array($option->getValue(), $attributeValues)) {
+                $attributeLabels[] = $option->getLabel();
             }
         }
-        if ($attributeData[AttributeInterface::FRONTEND_INPUT] == 'multiselect') {
-            foreach ($attributeValue as $selectedAttributeValues) {
-                $selectedAttributeValues = explode(',', $selectedAttributeValues);
-                foreach ($selectedAttributeValues as $selectedValue) {
-                    if (isset($attributeData[AttributeInterface::OPTIONS][$selectedValue])) {
-                        $selectedValues[] = $attributeData[AttributeInterface::OPTIONS][$selectedValue];
-                    }
-                }
-            }
-        }
-        $selectedValues = array_unique($selectedValues);
-        if (!empty($selectedValues)) {
-            $result = implode(' ', $selectedValues);
-        }
-        return $result;
+
+        return $attributeLabels;
     }
 
     /**
-     * Converts array into string depending on attribute type
+     * Retrieve value for field. If field have only one value this method return it.
+     * Otherwise will be returned array of these values.
+     * Note: array of values must have index keys, not as associative array.
      *
-     * @param array $attributeValue
-     * @param string|null $attributeBackendType
-     * @return string
+     * @param array $values
+     * @return array|string
      */
-    private function prepareArrayAttributeValue(array $attributeValue, $attributeBackendType)
+    private function retrieveFieldValue(array $values)
     {
-        return ($attributeBackendType === 'decimal') ? (string) \array_sum($attributeValue)
-            : implode(' ', $attributeValue);
+        $values = \array_filter(\array_unique($values));
+
+        return count($values) === 1 ? \array_shift($values) : \array_values($values);
     }
 }
diff --git a/vendor/magento/module-elasticsearch/Model/Adapter/FieldMapper/ProductFieldMapper.php b/vendor/magento/module-elasticsearch/Model/Adapter/FieldMapper/ProductFieldMapper.php
index 582eea9..fe526ec 100644
--- a/vendor/magento/module-elasticsearch/Model/Adapter/FieldMapper/ProductFieldMapper.php
+++ b/vendor/magento/module-elasticsearch/Model/Adapter/FieldMapper/ProductFieldMapper.php
@@ -126,6 +126,7 @@ class ProductFieldMapper extends Elasticsearch5ProductFieldMapper implements Fie
     {
         switch ($frontendInput) {
             case 'select':
+            case 'multiselect':
                 return in_array($fieldType, ['string','integer'], true) ? $attributeCode . '_value' : $attributeCode;
             case 'boolean':
                 return $fieldType === 'integer' ? $attributeCode . '_value' : $attributeCode;
diff --git a/vendor/magento/module-elasticsearch/Model/Config.php b/vendor/magento/module-elasticsearch/Model/Config.php
index 93e715f..17c31d7 100644
--- a/vendor/magento/module-elasticsearch/Model/Config.php
+++ b/vendor/magento/module-elasticsearch/Model/Config.php
@@ -23,6 +23,8 @@ class Config implements ClientOptionsInterface
      */
     const ENGINE_NAME = 'elasticsearch';
 
+    private static $engineName5 = 'elasticsearch5';
+
     /**
      * Elasticsearch Entity type
      */
@@ -126,7 +128,7 @@ class Config implements ClientOptionsInterface
      */
     public function isElasticsearchEnabled()
     {
-        return $this->getSearchConfigData('engine') == self::ENGINE_NAME;
+        return in_array($this->getSearchConfigData('engine'), [self::ENGINE_NAME, self::$engineName5]);
     }
 
     /**
diff --git a/vendor/magento/module-elasticsearch/SearchAdapter/Aggregation/Interval.php b/vendor/magento/module-elasticsearch/SearchAdapter/Aggregation/Interval.php
index 33ab1a4..1ed5f03 100644
--- a/vendor/magento/module-elasticsearch/SearchAdapter/Aggregation/Interval.php
+++ b/vendor/magento/module-elasticsearch/SearchAdapter/Aggregation/Interval.php
@@ -255,14 +255,11 @@ class Interval implements IntervalInterface
         if ($upper !== null) {
             $to = ['lt' => $data - self::DELTA];
         }
-
         $requestQuery = $requestCountQuery;
         $requestCountQuery['body']['query']['filtered']['filter']['bool']['must']['range'] =
             [$this->fieldName => array_merge($from, $to)];
-
         $requestCountQuery['body']['from'] = $offset - 1;
         $requestCountQuery['body']['size'] = $rightIndex - $offset + 1;
-
         $queryResult = $this->connectionManager->getConnection()
             ->query($requestQuery);
 
diff --git a/vendor/magento/module-elasticsearch/Test/Unit/Elasticsearch5/Model/Client/ElasticsearchTest.php b/vendor/magento/module-elasticsearch/Test/Unit/Elasticsearch5/Model/Client/ElasticsearchTest.php
index 415c8b6..312990d 100644
--- a/vendor/magento/module-elasticsearch/Test/Unit/Elasticsearch5/Model/Client/ElasticsearchTest.php
+++ b/vendor/magento/module-elasticsearch/Test/Unit/Elasticsearch5/Model/Client/ElasticsearchTest.php
@@ -356,7 +356,8 @@ class ElasticsearchTest extends \PHPUnit\Framework\TestCase
                                     'match' => 'price_*',
                                     'match_mapping_type' => 'string',
                                     'mapping' => [
-                                        'type' => 'float'
+                                        'type' => 'float',
+                                        'store' => true,
                                     ],
                                 ],
                             ],
@@ -366,7 +367,7 @@ class ElasticsearchTest extends \PHPUnit\Framework\TestCase
                                     'match_mapping_type' => 'string',
                                     'mapping' => [
                                         'type' => 'text',
-                                        'index' => 'no'
+                                        'index' => false
                                     ],
                                 ],
                             ],
@@ -409,7 +410,7 @@ class ElasticsearchTest extends \PHPUnit\Framework\TestCase
                     'product' => [
                         '_all' => [
                             'enabled' => true,
-                            'type' => 'text'
+                            'type' => 'text',
                         ],
                         'properties' => [
                             'name' => [
@@ -422,7 +423,8 @@ class ElasticsearchTest extends \PHPUnit\Framework\TestCase
                                     'match' => 'price_*',
                                     'match_mapping_type' => 'string',
                                     'mapping' => [
-                                        'type' => 'float'
+                                        'type' => 'float',
+                                        'store' => true,
                                     ],
                                 ],
                             ],
@@ -432,7 +434,7 @@ class ElasticsearchTest extends \PHPUnit\Framework\TestCase
                                     'match_mapping_type' => 'string',
                                     'mapping' => [
                                         'type' => 'text',
-                                        'index' => 'no',
+                                        'index' => false,
                                     ],
                                 ],
                             ],
@@ -441,7 +443,7 @@ class ElasticsearchTest extends \PHPUnit\Framework\TestCase
                                     'match' => 'position_*',
                                     'match_mapping_type' => 'string',
                                     'mapping' => [
-                                        'type' => 'int'
+                                        'type' => 'int',
                                     ],
                                 ],
                             ],
diff --git a/vendor/magento/module-elasticsearch/Test/Unit/Model/Adapter/BatchDataMapper/ProductDataMapperTest.php b/vendor/magento/module-elasticsearch/Test/Unit/Model/Adapter/BatchDataMapper/ProductDataMapperTest.php
index 4a77ca4..cfa048f 100644
--- a/vendor/magento/module-elasticsearch/Test/Unit/Model/Adapter/BatchDataMapper/ProductDataMapperTest.php
+++ b/vendor/magento/module-elasticsearch/Test/Unit/Model/Adapter/BatchDataMapper/ProductDataMapperTest.php
@@ -8,7 +8,10 @@ namespace Magento\Elasticsearch\Test\Unit\Model\Adapter\BatchDataMapper;
 use Magento\AdvancedSearch\Model\Adapter\DataMapper\AdditionalFieldsProviderInterface;
 use Magento\Catalog\Model\ResourceModel\Eav\Attribute;
 use Magento\CatalogSearch\Model\Indexer\Fulltext\Action\DataProvider;
+use Magento\Eav\Api\Data\AttributeOptionInterface;
 use Magento\Elasticsearch\Model\Adapter\BatchDataMapper\ProductDataMapper;
+use Magento\Elasticsearch\Model\Adapter\Document\Builder;
+use Magento\Elasticsearch\Model\Adapter\FieldMapperInterface;
 use Magento\Elasticsearch\Model\Adapter\FieldType\Date;
 use Magento\Framework\TestFramework\Unit\Helper\ObjectManager as ObjectManagerHelper;
 
@@ -59,31 +62,13 @@ class ProductDataMapperTest extends \PHPUnit\Framework\TestCase
      */
     protected function setUp()
     {
-        $this->builderMock = $this->getMockBuilder(\Magento\Elasticsearch\Model\Adapter\Document\Builder::class)
-            ->setMethods(['addField', 'addFields', 'build'])
-            ->disableOriginalConstructor()
-            ->getMock();
+        $this->builderMock = $this->createTestProxy(Builder::class);
+        $this->fieldMapperMock = $this->createMock(FieldMapperInterface::class);
+        $this->dataProvider = $this->createMock(DataProvider::class);
+        $this->attribute = $this->createMock(Attribute::class);
+        $this->additionalFieldsProvider = $this->createMock(AdditionalFieldsProviderInterface::class);
+        $this->dateFieldTypeMock = $this->createMock(Date::class);
 
-        $this->fieldMapperMock = $this->getMockBuilder(\Magento\Elasticsearch\Model\Adapter\FieldMapperInterface::class)
-            ->setMethods(['getFieldName', 'getAllAttributesTypes'])
-            ->disableOriginalConstructor()
-            ->getMock();
-
-        $this->dataProvider = $this->getMockBuilder(DataProvider::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-
-        $this->attribute = $this->getMockBuilder(\Magento\Catalog\Model\ResourceModel\Eav\Attribute::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-
-        $this->additionalFieldsProvider = $this->getMockBuilder(AdditionalFieldsProviderInterface::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-
-        $this->dateFieldTypeMock = $this->getMockBuilder(Date::class)
-            ->disableOriginalConstructor()
-            ->getMock();
         $objectManager = new ObjectManagerHelper($this);
         $this->model = $objectManager->getObject(
             ProductDataMapper::class,
@@ -97,271 +82,348 @@ class ProductDataMapperTest extends \PHPUnit\Framework\TestCase
         );
     }
 
+    /**
+     * @return void
+     */
     public function testGetMapAdditionalFieldsOnly()
     {
-        $productId = 42;
         $storeId = 1;
+        $productId = 42;
         $additionalFields = ['some data'];
-        $this->builderMock->expects($this->once())->method('addField')->with('store_id', $storeId);
+        $this->builderMock->expects($this->once())
+            ->method('addField')
+            ->with('store_id', $storeId);
 
-        $this->builderMock->expects($this->any())->method('addFields')
+        $this->builderMock->expects($this->any())
+            ->method('addFields')
             ->withConsecutive([$additionalFields])
-            ->will(
-                $this->returnSelf()
-            );
-        $this->builderMock->expects($this->any())->method('build')->will(
-            $this->returnValue([])
-        );
-        $this->additionalFieldsProvider->expects($this->once())->method('getFields')
+            ->will($this->returnSelf());
+        $this->builderMock->expects($this->any())
+            ->method('build')
+            ->will($this->returnValue([]));
+        $this->additionalFieldsProvider->expects($this->once())
+            ->method('getFields')
             ->with([$productId], $storeId)
             ->willReturn([$productId => $additionalFields]);
 
-        $this->assertEquals(
-            [$productId],
-            array_keys($this->model->map([$productId => []], $storeId, []))
-        );
+        $documents = $this->model->map([$productId => []], $storeId, []);
+        $this->assertEquals([$productId], array_keys($documents));
     }
 
+    /**
+     * @return void
+     */
     public function testGetMapEmptyData()
     {
         $storeId = 1;
+
         $this->builderMock->expects($this->never())->method('addField');
         $this->builderMock->expects($this->never())->method('build');
         $this->additionalFieldsProvider->expects($this->once())
             ->method('getFields')
-            ->with([], $storeId)->willReturn([]);
-
-        $this->assertEquals(
-            [],
-            $this->model->map([], $storeId, [])
-        );
-    }
-
-    public function testGetMapWithExcludedAttribute()
-    {
-        $productId = 42;
-        $storeId = 1;
-        $productAttributeData = ['price' => 42];
-        $attributeCode = 'price';
-        $returnAttributeData = ['store_id' => $storeId];
-
-        $this->dataProvider->expects($this->any())->method('getSearchableAttribute')
-            ->with($attributeCode)
-            ->willReturn($this->getAttribute($attributeCode, [
-                'value' => 42,
-                'backendType' => 'int',
-                'frontendInput' => 'int',
-                'options' => []
-            ]));
+            ->with([], $storeId)
+            ->willReturn([]);
 
-        $this->fieldMapperMock->expects($this->never())->method('getFieldName');
-        $this->builderMock->expects($this->any())
-            ->method('addField')
-            ->with('store_id', $storeId);
-        $this->builderMock->expects($this->once())->method('build')->willReturn($returnAttributeData);
-
-        $this->additionalFieldsProvider->expects($this->once())->method('getFields')->willReturn([]);
-        $this->assertEquals(
-            [$productId => $returnAttributeData],
-            $this->model->map([$productId => $productAttributeData], $storeId, [])
-        );
+        $documents = $this->model->map([], $storeId, []);
+        $this->assertEquals([], $documents);
     }
 
     /**
      * @param int $productId
-     * @param array $productData
+     * @param array $attributeData
+     * @param array|string $attributeValue
      * @param array $returnAttributeData
      * @dataProvider mapProvider
      */
-    public function testGetMap($productId, $productData, $returnAttributeData)
+    public function testGetMap(int $productId, array $attributeData, $attributeValue, array $returnAttributeData)
     {
         $storeId = 1;
-        $attributeCode = $productData['attributeCode'];
-        $this->dataProvider->expects($this->any())->method('getSearchableAttribute')
-            ->with($attributeCode)
-            ->willReturn($this->getAttribute($attributeCode, $productData['attributeData']));
+        $attributeId = 5;
+        $context = [];
 
-        $this->fieldMapperMock->expects($this->any())->method('getFieldName')
-            ->with($attributeCode, [])
+        $this->dataProvider->method('getSearchableAttribute')
+            ->with($attributeId)
+            ->willReturn($this->getAttribute($attributeData));
+        $this->fieldMapperMock->method('getFieldName')
             ->willReturnArgument(0);
-        if ($productData['attributeData']['frontendInput'] === 'date') {
-            $this->dateFieldTypeMock->expects($this->once())->method('formatDate')
-                ->with($storeId, $productData['attributeValue'])
-                ->willReturnArgument(1);
-        }
-
-        $this->builderMock->expects($this->exactly(2))
-            ->method('addField')
-            ->withConsecutive(
-                ['store_id', $storeId],
-                [$attributeCode, $returnAttributeData[$attributeCode]]
-            );
+        $this->dateFieldTypeMock->method('formatDate')
+            ->willReturnArgument(1);
+        $this->additionalFieldsProvider->expects($this->once())
+            ->method('getFields')
+            ->willReturn([]);
 
-        $this->builderMock->expects($this->once())->method('build')->willReturn($returnAttributeData);
-        $this->additionalFieldsProvider->expects($this->once())->method('getFields')->willReturn([]);
         $documentData = [
-            $productId => [$productData['attributeCode'] => $productData['attributeValue']]
+            $productId => [$attributeId => $attributeValue],
         ];
-        $this->assertEquals(
-            [$productId => $returnAttributeData],
-            $this->model->map($documentData, $storeId, [])
-        );
+        $documents = $this->model->map($documentData, $storeId, $context);
+        $returnAttributeData['store_id'] = $storeId;
+        $this->assertEquals($returnAttributeData, $documents[$productId]);
     }
 
     /**
-     * @param int $productId
-     * @param array $productData
-     * @param array $returnAttributeData
-     * @dataProvider mapProviderForAttributeWithOptions
+     * @return void
      */
-    public function testGetMapForAttributeWithOptions($productId, $productData, $returnAttributeData)
+    public function testGetMapWithOptions()
     {
         $storeId = 1;
-        $attributeCode = $productData['attributeCode'];
-        $this->dataProvider->expects($this->any())->method('getSearchableAttribute')
-            ->with($attributeCode)
-            ->willReturn($this->getAttribute($attributeCode, $productData['attributeData']));
+        $productId = 10;
+        $context = [];
+        $attributeValue = ['o1', 'o2'];
+        $returnAttributeData = [
+            'store_id' => $storeId,
+            'options' => $attributeValue,
+        ];
 
-        $this->fieldMapperMock->expects($this->any())->method('getFieldName')
-            ->with($attributeCode, [])
+        $this->dataProvider->expects($this->never())
+            ->method('getSearchableAttribute');
+        $this->fieldMapperMock->method('getFieldName')
             ->willReturnArgument(0);
-        if ($productData['attributeData']['frontendInput'] === 'date') {
-            $this->dateFieldTypeMock->expects($this->once())->method('formatDate')
-                ->with($storeId, $productData['attributeValue'])
-                ->willReturnArgument(1);
-        }
-        $this->builderMock->expects($this->exactly(3))
-            ->method('addField')
-            ->withConsecutive(
-                ['store_id', $storeId],
-                [$attributeCode . '_value', $returnAttributeData[$attributeCode . '_value']],
-                [$attributeCode, $returnAttributeData[$attributeCode]]
-            );
-        $this->builderMock->expects($this->once())->method('build')->willReturn($returnAttributeData);
-        $this->additionalFieldsProvider->expects($this->once())->method('getFields')->willReturn([]);
+        $this->additionalFieldsProvider->expects($this->once())
+            ->method('getFields')
+            ->willReturn([]);
+
         $documentData = [
-            $productId => [$productData['attributeCode'] => $productData['attributeValue']]
+            $productId => ['options' => $attributeValue],
         ];
-        $this->assertEquals(
-            [$productId => $returnAttributeData],
-            $this->model->map($documentData, $storeId, [])
-        );
+        $documents = $this->model->map($documentData, $storeId, $context);
+        $this->assertEquals($returnAttributeData, $documents[$productId]);
     }
 
     /**
      * Return attribute mock
      *
-     * @param string $attributeCode
      * @param array attributeData
      * @return \PHPUnit_Framework_MockObject_MockObject
      */
-    private function getAttribute($attributeCode, $attributeData)
+    private function getAttribute(array $attributeData): \PHPUnit_Framework_MockObject_MockObject
     {
-        $attribute = $this->getMockBuilder(\Magento\Catalog\Model\ResourceModel\Eav\Attribute::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-        $attribute->expects($this->once())->method('getAttributeCode')->willReturn($attributeCode);
-        $attribute->expects($this->once())->method('getBackendType')->willReturn($attributeData['backendType']);
-        $attribute->expects($this->any())->method('getFrontendInput')->willReturn($attributeData['frontendInput']);
-        $attribute->expects($this->any())->method('getOptions')->willReturn($attributeData['options']);
+        $attributeMock = $this->createMock(Attribute::class);
+        $attributeMock->method('getAttributeCode')->willReturn($attributeData['code']);
+        $attributeMock->method('getBackendType')->willReturn($attributeData['backendType']);
+        $attributeMock->method('getFrontendInput')->willReturn($attributeData['frontendInput']);
+        $attributeMock->method('getIsSearchable')->willReturn($attributeData['is_searchable']);
+        $options = [];
+        foreach ($attributeData['options'] as $option) {
+            $optionMock = $this->createMock(AttributeOptionInterface::class);
+            $optionMock->method('getValue')->willReturn($option['value']);
+            $optionMock->method('getLabel')->willReturn($option['label']);
+            $options[] = $optionMock;
+        }
+        $attributeMock->method('getOptions')->willReturn($options);
 
-        return $attribute;
+        return $attributeMock;
     }
 
     /**
      * @return array
+     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)
      */
-    public static function mapProvider()
+    public static function mapProvider(): array
     {
         return [
-            'text attribute' => [
-                11,
+            'text' => [
+                10,
                 [
-                    'attributeCode' => 'description',
-                    'attributeValue' => 'some text',
-                    'attributeData' => [
-                        'backendType' => 'text',
-                        'frontendInput' => 'text',
-                        'options' => []
-                    ]
+                    'code' => 'description',
+                    'backendType' => 'text',
+                    'frontendInput' => 'text',
+                    'is_searchable' => false,
+                    'options' => [],
                 ],
+                'some text',
                 ['description' => 'some text'],
             ],
-            'date time attribute' => [
-                12,
+            'datetime' => [
+                10,
                 [
-                    'attributeCode' => 'created_at',
-                    'attributeValue' => '00-00-00 00:00:00',
-                    'attributeData' => [
-                        'backendType' => 'datetime',
-                        'frontendInput' => 'date',
-                        'options' => []
-                    ]
+                    'code' => 'created_at',
+                    'backendType' => 'datetime',
+                    'frontendInput' => 'date',
+                    'is_searchable' => false,
+                    'options' => [],
                 ],
+                '00-00-00 00:00:00',
                 ['created_at' => '00-00-00 00:00:00'],
 
             ],
-            'array value attribute' => [
-                12,
+            'array single value' => [
+                10,
                 [
-                    'attributeCode' => 'attribute_array',
-                    'attributeValue' => ['one', 'two', 'three'],
-                    'attributeData' => [
-                        'backendType' => 'text',
-                        'frontendInput' => 'text',
-                        'options' => []
-                    ]
+                    'code' => 'attribute_array',
+                    'backendType' => 'text',
+                    'frontendInput' => 'text',
+                    'is_searchable' => false,
+                    'options' => [],
                 ],
-                ['attribute_array' => 'one two three'],
+                [10 => 'one'],
+                ['attribute_array' => 'one'],
             ],
-            'array value attribute decimal' => [
-                12,
+            'array multiple value' => [
+                10,
                 [
-                    'attributeCode' => 'attribute_array',
-                    'attributeValue' => ['0.1', '0.2', '0.3'],
-                    'attributeData' => [
-                        'backendType' => 'decimal',
-                        'frontendInput' => 'text',
-                        'options' => []
-                    ]
+                    'code' => 'attribute_array',
+                    'backendType' => 'text',
+                    'frontendInput' => 'text',
+                    'is_searchable' => false,
+                    'options' => [],
                 ],
-                ['attribute_array' => '0.6'],
+                [10 => 'one', 11 => 'two', 12 => 'three'],
+                ['attribute_array' => ['one', 'two', 'three']],
             ],
-            'multiselect value attribute' => [
-                12,
+            'array multiple decimal value' => [
+                10,
                 [
-                    'attributeCode' => 'multiselect',
-                    'attributeValue' => 'some,data with,comma',
-                    'attributeData' => [
-                        'backendType' => 'text',
-                        'frontendInput' => 'multiselect',
-                        'options' => []
-                    ]
+                    'code' => 'decimal_array',
+                    'backendType' => 'decimal',
+                    'frontendInput' => 'text',
+                    'is_searchable' => false,
+                    'options' => [],
                 ],
-                ['multiselect' => 'some data with comma'],
+                [10 => '0.1', 11 => '0.2', 12 => '0.3'],
+                ['decimal_array' => ['0.1', '0.2', '0.3']],
             ],
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    public static function mapProviderForAttributeWithOptions()
-    {
-        return [
-            'select value attribute' => [
-                12,
+            'array excluded from merge' => [
+                10,
+                [
+                    'code' => 'status',
+                    'backendType' => 'int',
+                    'frontendInput' => 'select',
+                    'is_searchable' => false,
+                    'options' => [
+                        ['value' => '1', 'label' => 'Enabled'],
+                        ['value' => '2', 'label' => 'Disabled'],
+                    ],
+                ],
+                [10  => '1', 11 => '2'],
+                ['status' => '1'],
+            ],
+            'select without options' => [
+                10,
                 [
-                    'attributeCode' => 'color',
-                    'attributeValue' => '44',
-                    'attributeData' => [
-                        'backendType' => 'text',
-                        'frontendInput' => 'select',
-                        'options' => [new \Magento\Framework\DataObject(['value' => '44', 'label' => 'red'])]
-                    ]
+                    'code' => 'color',
+                    'backendType' => 'text',
+                    'frontendInput' => 'select',
+                    'is_searchable' => false,
+                    'options' => [],
                 ],
+                '44',
+                ['color' => '44'],
+            ],
+            'unsearchable select with options' => [
+                10,
+                [
+                    'code' => 'color',
+                    'backendType' => 'text',
+                    'frontendInput' => 'select',
+                    'is_searchable' => false,
+                    'options' => [
+                        ['value' => '44', 'label' => 'red'],
+                        ['value' => '45', 'label' => 'black'],
+                    ],
+                ],
+                '44',
+                ['color' => '44'],
+            ],
+            'searchable select with options' => [
+                10,
+                [
+                    'code' => 'color',
+                    'backendType' => 'text',
+                    'frontendInput' => 'select',
+                    'is_searchable' => true,
+                    'options' => [
+                        ['value' => '44', 'label' => 'red'],
+                        ['value' => '45', 'label' => 'black'],
+                    ],
+                ],
+                '44',
                 ['color' => '44', 'color_value' => 'red'],
             ],
+            'composite select with options' => [
+                10,
+                [
+                    'code' => 'color',
+                    'backendType' => 'text',
+                    'frontendInput' => 'select',
+                    'is_searchable' => true,
+                    'options' => [
+                        ['value' => '44', 'label' => 'red'],
+                        ['value' => '45', 'label' => 'black'],
+                    ],
+                ],
+                [10 => '44', 11 => '45'],
+                ['color' => ['44', '45'], 'color_value' => ['red', 'black']],
+            ],
+            'multiselect without options' => [
+                10,
+                [
+                    'code' => 'multicolor',
+                    'backendType' => 'text',
+                    'frontendInput' => 'multiselect',
+                    'is_searchable' => false,
+                    'options' => [],
+                ],
+                '44,45',
+                ['multicolor' => [44, 45]],
+            ],
+            'unsearchable multiselect with options' => [
+                10,
+                [
+                    'code' => 'multicolor',
+                    'backendType' => 'text',
+                    'frontendInput' => 'multiselect',
+                    'is_searchable' => false,
+                    'options' => [
+                        ['value' => '44', 'label' => 'red'],
+                        ['value' => '45', 'label' => 'black'],
+                    ],
+                ],
+                '44,45',
+                ['multicolor' => [44, 45]],
+            ],
+            'searchable multiselect with options' => [
+                10,
+                [
+                    'code' => 'multicolor',
+                    'backendType' => 'text',
+                    'frontendInput' => 'multiselect',
+                    'is_searchable' => true,
+                    'options' => [
+                        ['value' => '44', 'label' => 'red'],
+                        ['value' => '45', 'label' => 'black'],
+                    ],
+                ],
+                '44,45',
+                ['multicolor' => [44, 45], 'multicolor_value' => ['red', 'black']],
+            ],
+            'composite multiselect with options' => [
+                10,
+                [
+                    'code' => 'multicolor',
+                    'backendType' => 'text',
+                    'frontendInput' => 'multiselect',
+                    'is_searchable' => true,
+                    'options' => [
+                        ['value' => '44', 'label' => 'red'],
+                        ['value' => '45', 'label' => 'black'],
+                        ['value' => '46', 'label' => 'green'],
+                    ],
+                ],
+                [10 => '44,45', 11 => '45,46'],
+                ['multicolor' => [44, 45, 46], 'multicolor_value' => ['red', 'black', 'green']],
+            ],
+            'excluded attribute' => [
+                10,
+                [
+                    'code' => 'price',
+                    'backendType' => 'int',
+                    'frontendInput' => 'int',
+                    'is_searchable' => false,
+                    'options' => []
+                ],
+                15,
+                []
+            ],
         ];
     }
 }
diff --git a/vendor/magento/module-elasticsearch/composer.json b/vendor/magento/module-elasticsearch/composer.json
index 2abf0f0..490fdbc 100644
--- a/vendor/magento/module-elasticsearch/composer.json
+++ b/vendor/magento/module-elasticsearch/composer.json
@@ -18,7 +18,7 @@
         "magento/module-config": "101.0.*"
     },
     "type": "magento2-module",
-    "version": "100.2.5",
+    "version": "100.2.6",
     "license": [
         "proprietary"
     ],
diff --git a/vendor/magento/module-elasticsearch/etc/esconfig.xml b/vendor/magento/module-elasticsearch/etc/esconfig.xml
index 0a87b58..49124c4 100644
--- a/vendor/magento/module-elasticsearch/etc/esconfig.xml
+++ b/vendor/magento/module-elasticsearch/etc/esconfig.xml
@@ -16,7 +16,6 @@
         <fr_FR>french</fr_FR>
         <nl_NL>dutch</nl_NL>
         <pt_BR>portuguese</pt_BR>
-        <zh_Hans_CN>cjk</zh_Hans_CN>
     </stemmer>
     <stopwords_file>
         <default>stopwords.csv</default>
