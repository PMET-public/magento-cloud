name: test runner

on:
  push:

env:
  # set a default terminal for various cmds that expect it
  TERM: xterm
  COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}
  SLACK_WEBHOOK_URL_FOR_TMATE_FROM_GITHUB_WORKFLOW: ${{ secrets.SLACK_WEBHOOK_URL_FOR_TMATE_FROM_GITHUB_WORKFLOW }}
  TMATE_AUTHORIZED_KEYS_URL: ${{ secrets.TMATE_AUTHORIZED_KEYS_URL }}
  MDM_REPO_DIR: ${{ github.workspace}}/mdm

jobs:

  dockerize-then-run-magento-app:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
        with:
          repository: 'PMET-public/mdm'
          submodules: 'true'
          path: 'mdm'
          tag: '1.0.0'
      - name: bats tests
        run: |
          cd mdm
          ./tests/dockerize-then-run-magento-app/all/1-install-mdm-and-create-magento-app.bats
          cd ..
      - name: get updated, generated config.php
        if: ${{ success() }}
        run: |
          app_dir="$(find "$HOME/Downloads" -maxdepth 1 -type d -name "*.app" || :)"
          "$app_dir/Contents/Resources/script" start_shell_in_app 'php bin/magento config:show "web/secure/base_url"'
          start_shell_in_app 'cat app/etc/config.php' > app/etc/config.php
          git archive --format=tar HEAD > /tmp/${{ github.ref }}.tar
          tar -rf /tmp/${{ github.ref }}.tar app/etc/config.php
      - name: create release
        if: ${{ success() }}
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: upload release asset
        if: ${{ success() }}
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`.
          # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /tmp/${{ github.ref }}.tar
          asset_name: ${{ github.ref }}.tar
          asset_content_type: application/tar
      - name: keepalive to debug
        if: ${{ failure() }}
        uses: PMET-public/action-tmate@master